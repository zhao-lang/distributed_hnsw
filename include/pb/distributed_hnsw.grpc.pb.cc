// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: distributed_hnsw.proto

#include "distributed_hnsw.pb.h"
#include "distributed_hnsw.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* DistributedHNSW_method_names[] = {
  "/DistributedHNSW/Join",
  "/DistributedHNSW/AddNode",
  "/DistributedHNSW/DeleteNode",
  "/DistributedHNSW/SearchKNN",
};

std::unique_ptr< DistributedHNSW::Stub> DistributedHNSW::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< DistributedHNSW::Stub> stub(new DistributedHNSW::Stub(channel));
  return stub;
}

DistributedHNSW::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Join_(DistributedHNSW_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddNode_(DistributedHNSW_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNode_(DistributedHNSW_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchKNN_(DistributedHNSW_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DistributedHNSW::Stub::Join(::grpc::ClientContext* context, const ::JoinRequest& request, ::JoinResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Join_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::JoinResponse>* DistributedHNSW::Stub::AsyncJoinRaw(::grpc::ClientContext* context, const ::JoinRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::JoinResponse>::Create(channel_.get(), cq, rpcmethod_Join_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::JoinResponse>* DistributedHNSW::Stub::PrepareAsyncJoinRaw(::grpc::ClientContext* context, const ::JoinRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::JoinResponse>::Create(channel_.get(), cq, rpcmethod_Join_, context, request, false);
}

::grpc::Status DistributedHNSW::Stub::AddNode(::grpc::ClientContext* context, const ::Node& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddNode_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* DistributedHNSW::Stub::AsyncAddNodeRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_AddNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* DistributedHNSW::Stub::PrepareAsyncAddNodeRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_AddNode_, context, request, false);
}

::grpc::Status DistributedHNSW::Stub::DeleteNode(::grpc::ClientContext* context, const ::Node& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteNode_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* DistributedHNSW::Stub::AsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* DistributedHNSW::Stub::PrepareAsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteNode_, context, request, false);
}

::grpc::Status DistributedHNSW::Stub::SearchKNN(::grpc::ClientContext* context, const ::Node& request, ::SearchResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SearchKNN_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::SearchResult>* DistributedHNSW::Stub::AsyncSearchKNNRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SearchResult>::Create(channel_.get(), cq, rpcmethod_SearchKNN_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SearchResult>* DistributedHNSW::Stub::PrepareAsyncSearchKNNRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SearchResult>::Create(channel_.get(), cq, rpcmethod_SearchKNN_, context, request, false);
}

DistributedHNSW::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistributedHNSW_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistributedHNSW::Service, ::JoinRequest, ::JoinResponse>(
          std::mem_fn(&DistributedHNSW::Service::Join), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistributedHNSW_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistributedHNSW::Service, ::Node, ::Empty>(
          std::mem_fn(&DistributedHNSW::Service::AddNode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistributedHNSW_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistributedHNSW::Service, ::Node, ::Empty>(
          std::mem_fn(&DistributedHNSW::Service::DeleteNode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistributedHNSW_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistributedHNSW::Service, ::Node, ::SearchResult>(
          std::mem_fn(&DistributedHNSW::Service::SearchKNN), this)));
}

DistributedHNSW::Service::~Service() {
}

::grpc::Status DistributedHNSW::Service::Join(::grpc::ServerContext* context, const ::JoinRequest* request, ::JoinResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DistributedHNSW::Service::AddNode(::grpc::ServerContext* context, const ::Node* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DistributedHNSW::Service::DeleteNode(::grpc::ServerContext* context, const ::Node* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DistributedHNSW::Service::SearchKNN(::grpc::ServerContext* context, const ::Node* request, ::SearchResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


