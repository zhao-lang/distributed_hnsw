// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: distributed_hnsw.proto
#ifndef GRPC_distributed_5fhnsw_2eproto__INCLUDED
#define GRPC_distributed_5fhnsw_2eproto__INCLUDED

#include "distributed_hnsw.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class DistributedHNSW final {
 public:
  static constexpr char const* service_full_name() {
    return "DistributedHNSW";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Join(::grpc::ClientContext* context, const ::JoinRequest& request, ::JoinResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JoinResponse>> AsyncJoin(::grpc::ClientContext* context, const ::JoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JoinResponse>>(AsyncJoinRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JoinResponse>> PrepareAsyncJoin(::grpc::ClientContext* context, const ::JoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JoinResponse>>(PrepareAsyncJoinRaw(context, request, cq));
    }
    virtual ::grpc::Status AddNode(::grpc::ClientContext* context, const ::Node& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncAddNode(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncAddNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncAddNode(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncAddNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteNode(::grpc::ClientContext* context, const ::Node& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncDeleteNode(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncDeleteNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncDeleteNode(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncDeleteNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status SearchKNN(::grpc::ClientContext* context, const ::Node& request, ::SearchResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SearchResult>> AsyncSearchKNN(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SearchResult>>(AsyncSearchKNNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SearchResult>> PrepareAsyncSearchKNN(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SearchResult>>(PrepareAsyncSearchKNNRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::JoinResponse>* AsyncJoinRaw(::grpc::ClientContext* context, const ::JoinRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::JoinResponse>* PrepareAsyncJoinRaw(::grpc::ClientContext* context, const ::JoinRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncAddNodeRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncAddNodeRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SearchResult>* AsyncSearchKNNRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SearchResult>* PrepareAsyncSearchKNNRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Join(::grpc::ClientContext* context, const ::JoinRequest& request, ::JoinResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JoinResponse>> AsyncJoin(::grpc::ClientContext* context, const ::JoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JoinResponse>>(AsyncJoinRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JoinResponse>> PrepareAsyncJoin(::grpc::ClientContext* context, const ::JoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JoinResponse>>(PrepareAsyncJoinRaw(context, request, cq));
    }
    ::grpc::Status AddNode(::grpc::ClientContext* context, const ::Node& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncAddNode(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncAddNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncAddNode(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncAddNodeRaw(context, request, cq));
    }
    ::grpc::Status DeleteNode(::grpc::ClientContext* context, const ::Node& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncDeleteNode(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncDeleteNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncDeleteNode(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncDeleteNodeRaw(context, request, cq));
    }
    ::grpc::Status SearchKNN(::grpc::ClientContext* context, const ::Node& request, ::SearchResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SearchResult>> AsyncSearchKNN(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SearchResult>>(AsyncSearchKNNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SearchResult>> PrepareAsyncSearchKNN(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SearchResult>>(PrepareAsyncSearchKNNRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::JoinResponse>* AsyncJoinRaw(::grpc::ClientContext* context, const ::JoinRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::JoinResponse>* PrepareAsyncJoinRaw(::grpc::ClientContext* context, const ::JoinRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncAddNodeRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncAddNodeRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SearchResult>* AsyncSearchKNNRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SearchResult>* PrepareAsyncSearchKNNRaw(::grpc::ClientContext* context, const ::Node& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Join_;
    const ::grpc::internal::RpcMethod rpcmethod_AddNode_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNode_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchKNN_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Join(::grpc::ServerContext* context, const ::JoinRequest* request, ::JoinResponse* response);
    virtual ::grpc::Status AddNode(::grpc::ServerContext* context, const ::Node* request, ::Empty* response);
    virtual ::grpc::Status DeleteNode(::grpc::ServerContext* context, const ::Node* request, ::Empty* response);
    virtual ::grpc::Status SearchKNN(::grpc::ServerContext* context, const ::Node* request, ::SearchResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Join() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::JoinRequest* request, ::JoinResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoin(::grpc::ServerContext* context, ::JoinRequest* request, ::grpc::ServerAsyncResponseWriter< ::JoinResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddNode() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* context, const ::Node* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNode(::grpc::ServerContext* context, ::Node* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteNode() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNode(::grpc::ServerContext* context, const ::Node* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNode(::grpc::ServerContext* context, ::Node* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchKNN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SearchKNN() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SearchKNN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchKNN(::grpc::ServerContext* context, const ::Node* request, ::SearchResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchKNN(::grpc::ServerContext* context, ::Node* request, ::grpc::ServerAsyncResponseWriter< ::SearchResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Join<WithAsyncMethod_AddNode<WithAsyncMethod_DeleteNode<WithAsyncMethod_SearchKNN<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Join() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::JoinRequest* request, ::JoinResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddNode() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* context, const ::Node* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteNode() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNode(::grpc::ServerContext* context, const ::Node* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchKNN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SearchKNN() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SearchKNN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchKNN(::grpc::ServerContext* context, const ::Node* request, ::SearchResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Join() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::JoinRequest, ::JoinResponse>(std::bind(&WithStreamedUnaryMethod_Join<BaseClass>::StreamedJoin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::JoinRequest* request, ::JoinResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedJoin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::JoinRequest,::JoinResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddNode() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Node, ::Empty>(std::bind(&WithStreamedUnaryMethod_AddNode<BaseClass>::StreamedAddNode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* context, const ::Node* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Node,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteNode() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::Node, ::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteNode<BaseClass>::StreamedDeleteNode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNode(::grpc::ServerContext* context, const ::Node* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Node,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchKNN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SearchKNN() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::Node, ::SearchResult>(std::bind(&WithStreamedUnaryMethod_SearchKNN<BaseClass>::StreamedSearchKNN, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SearchKNN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchKNN(::grpc::ServerContext* context, const ::Node* request, ::SearchResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchKNN(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Node,::SearchResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Join<WithStreamedUnaryMethod_AddNode<WithStreamedUnaryMethod_DeleteNode<WithStreamedUnaryMethod_SearchKNN<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Join<WithStreamedUnaryMethod_AddNode<WithStreamedUnaryMethod_DeleteNode<WithStreamedUnaryMethod_SearchKNN<Service > > > > StreamedService;
};


#endif  // GRPC_distributed_5fhnsw_2eproto__INCLUDED
